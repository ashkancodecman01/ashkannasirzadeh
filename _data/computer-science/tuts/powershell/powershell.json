[{
    "sort_num": 1,
    "color": "darkred",
    "type": "img",
    "group": "intro-img",
    "format": "txt",
    "content": "../../../../assets/computer-science/pics/powershell.jpg"
}, {
    "sort_num": 2,
    "color": "darkred",
    "type": "bdi-text",
    "group": "intro-author",
    "format": "txt",
    "content": "src = ../../../../assets/homepage/media/rasmi.jpg, name = اشکان نصیرزاده , alt = اشکان نصیرزاده"
}, {
    "sort_num": 3,
    "color": "darkred",
    "type": "bdi-text",
    "group": "intro-head",
    "format": "txt",
    "content": "powershell"
}, {
    "sort_num": 4,
    "color": "orangered",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "کمک گرفتن در powershell"
}, {
    "sort_num": 5,
    "color": "orangered",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "command های powershell را cmdlets می نامیم ( یا همون command let) و برای کمک گرفتن در پاورشل دستور اصلی Get-Help است اما می توان از دستورات help و man نیز استفاده کرد."
}, {
    "sort_num": 6,
    "color": "orangered",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "Get-Help dir<br>man dir<br>help dir<br>"
}, {
    "sort_num": 7,
    "color": "orangered",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "من جمله سوویچ های مهم در این رابطه عبارتند از :"
}, {
    "sort_num": 8,
    "color": "orangered",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "help dir -showWindow<br>help dir -Detailed<br>help dir -examples<br>help dir -Full<br>help *user*<br>"
}, {
    "sort_num": 9,
    "color": "orangered",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "اگر مثلا examples ها رو براتون نمیاره باید از فرمان زیر استفاده بکنید:"
}, {
    "sort_num": 10,
    "color": "orangered",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "Update-Help"
}, {
    "sort_num": 11,
    "color": "darkorchid",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "ورژن powershell<br>"
}, {
    "sort_num": 12,
    "color": "darkorchid",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "برای اینکه بفهمید آخرین ورژن کدام است باید عبارت&nbsp;windows management framework latest download رو تو گوگل سرچ کنید ."
}, {
    "sort_num": 13,
    "color": "darkorchid",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "$PSVersionTable"
}, {
    "sort_num": 14,
    "color": "tomato",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "غربال گری نتایج در powershell"
}, {
    "sort_num": 15,
    "color": "tomato",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "اولا می تونید از از سرتیتر ها به شکل سوییچ استفاده کنید مثلا در مثال زیر تمام آیتم هایی که نام آنها d دارد را می گیریم:"
}, {
    "sort_num": 16,
    "color": "tomato",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "dir -Name *d*"
}, {
    "sort_num": 17,
    "color": "tomato",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "دوما باید کار با استرینگ ها در powershell را بلد باشیم :"
}, {
    "sort_num": 18,
    "color": "tomato",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "PS&gt; '12' -match '\\d\\d'<br>True<br>---------------------------------------------<br>PS&gt; $data = @('12', '13', 'ali', 'hosi')<br>PS&gt; $data -match '\\d\\d'<br>12<br>13<br>---------------------------------------------<br>PS&gt; $a = 'ali is 18 years old'&nbsp;<br>PS&gt;&nbsp;$a -match '\\w+\\s+is (\\d+)\\s+years old'<br>PS&gt; $Matches<br>&nbsp;Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Value&nbsp;<br>&nbsp;----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-----<br>&nbsp; &nbsp;1&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 18<br>&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ali is 18 years old&nbsp;<br>---------------------------------------------<br>$message = 'My Name is Kevin and my SSN is 123-45-6789.' <br>if($message -match 'My Name is (?&lt;Name&gt;.+) and my SSN is (?&lt;SSN&gt;\\d\\d\\d-\\d\\d-\\d\\d\\d\\d)\\.') <br>{ <br>$Matches.Name <br>$Matches.SSN <br>}<br>"
}, {
    "sort_num": 19,
    "color": "tomato",
    "type": "bdi-text",
    "group": "para",
    "format": "code",
    "content": "این مورد سه حالت دیگر هم دارد:<br>۱- imatch : غیر کیس سنستیو میکنه<br>۲- cmatch : کیس سنستیو میکنه<br>۳- notmatch : وقتی که هیچ تطابقی درست نیست true برمی گرداند.<br>"
}, {
    "sort_num": 20,
    "color": "tomato",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "PS&gt; $message = 'hello world how are you?'<br>PS&gt; $message.contains('hello')<br>true<br>"
}, {
    "sort_num": 21,
    "color": "tomato",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "PS&gt; $a = 'i am hasan'<br>PS&gt; $b = $a.Replace('hasan', 'ashkan')<br>PS&gt; $b<br>i am ashkan<br>PS&gt; $b.Length<br>11<br>"
}, {
    "sort_num": 22,
    "color": "tomato",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "PS&gt; 'a,b,c' -split ','<br>a<br>b<br>c<br>---------------------------------<br>PS&gt; $a = 'a,b,c'<br>PS&gt; $b = $a.Split(',')<br>PS&gt; $b<br>a<br>b<br>c<br>"
}, {
    "sort_num": 23,
    "color": "tomato",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "این نیز حالت های split- , -csplit دارد."
}, {
    "sort_num": 24,
    "color": "tomato",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "PS&gt; $a = '12'<br>PS C:\\Users\\ashkan nasirzadeh&gt; switch -regex ($a) {<br>&gt;&gt; '/d' {<br>&gt;&gt; Write-Warning 'one d'<br>&gt;&gt; }<br>&gt;&gt; '\\d\\d' {<br>&gt;&gt; Write-Warning 'two d'<br>&gt;&gt; }<br>&gt;&gt; }<br>WARNING: two d<br>"
}, {
    "sort_num": 25,
    "color": "darkgoldenrod",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "مدیریت دیسک ها در powershell"
}, {
    "sort_num": 26,
    "color": "darkgoldenrod",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "اولا باید کلا بدونید که داستان چیه ؟ داستان اینه که ما یک سری دیسک داریم که همون دیسک های فیزیکی ای هستند که به سخت افزار وصل می شوند و باید بدونید که مثلا هم یک دیسک محسوب می شود حالا این دیسک ها رو می خواهیم چی کار کنیم؟<br>۱- اولا شاید بخواهیم این دیسک ها رو اضافه کنیم:<br>برای این کار باید اول قسمت بندیشون کنیم که به کامپیوتر بفهمونیم چقدر از حجمشون رو می خواهیم که به این کار می گیم پارتیشن بندی دوما باید فایل سیستم مورد نظر رو روی اون پارتیشن نصب کنیم یا به اصطلاح شخمش بزنیم که آماده ی کاشت اطلاعات بشود که این کار رو از طریق فرمت کردن انجام می دیم<br>۲- کار دیگه ای که ممکنه بخواهیم بکنیم پارک کردن پارتیشن ها و دوباره ساختن آنهاست<br>۳- و در نهایت کار سومی که می خواهیم بکنیم اضافه کردن فضا به هارد دیسکمون هست<br>در این آموزش ۲ مورد اول رو یاد می گیریم و مورد سوم فعلا حال ندارم بذارم:<br>"
}, {
    "sort_num": 27,
    "color": "darkgoldenrod",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# to build a new partition:<br>-----------------------------------------------<br># get the number of the disk that you want to add:<br>PS&gt; Get-Disk<br># initialize it:<br>PS&gt; Initialize-Disk -Number 1<br># partition it with max size of that<br>PS&gt; New-Partition -DiskNumber 1 -DriveLetter D -UseMaximumSize<br># get the drive letter that you want to format<br>PS&gt; Get-Volume<br># format that volume with default filesystem<br>PS&gt; Format-Volume -DriveLetter E<br>"
}, {
    "sort_num": 28,
    "color": "darkgoldenrod",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# to delete a partition:<br>-----------------------------------------------<br>diskpart<br>list disk<br>select disk n<br>list partition<br>select partition n<br>delete partition #or delete partition OVERRIDE<br>"
}, {
    "sort_num": 29,
    "color": "darkorange",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "کار با user ها و group ها در powershell"
}, {
    "sort_num": 30,
    "color": "darkorange",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "دقت کنید که کاربر در ویندوز بدون گروه هیچ معنایی ندارد زیرا که اصلا بدون تعلق به یک گروه سطح دسترسی ای متصور نیست و همچنین دقت کنید برای هر user باید یک password داشته باشید."
}, {
    "sort_num": 33,
    "color": "darkorange",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# get all users:<br>PS&gt;&nbsp;Get-LocalUser<br># get all groups:<br>PS&gt;&nbsp;Get-LocalGroup<br># add a user and bind it with a group:<br>PS&gt;&nbsp;New-LocalUser -Name newTestUser<br>PS&gt;&nbsp;Add-LocalGroupMember -Group \"administrators\"<br># add a group and add a user to it:<br>PS&gt;&nbsp;&nbsp;New-LocalGroup -Name newTestgroup<br>PS&gt;&nbsp;&nbsp;Add-LocalGroupMember -Group \"administrators\"<br># get members of a group:<br>PS&gt;&nbsp;Get-LocalGroupMember -Group 'administrators'<br>"
}, {
    "sort_num": 34,
    "color": "darksalmon",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "حلقه ها ، شروط ، متغیر ها"
}, {
    "sort_num": 35,
    "color": "darksalmon",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# build 10 folder:<br>PS&gt; for ($i = 1; $i -le 10; $i++) { mkdir $i }<br># delete same folders:<br>PS&gt; for ($i = 1; $i -le 10; $i++) { rmdir $i }<br># delete all directories that have one digit name:<br>PS&gt; dir | ForEach-Object { if ($_ -match '^\\d$') { rmdir $_ } }<br># delete all mp3 files (1):<br>PS&gt; dir | ForEach-Object { $Matches = @() ; echo ------$_ ; $_ -match '(\\w+)\\.(\\w+)' ; if&nbsp; ($Matches[2] -eq 'mp3') { Remove-Item $Matches[0] }}<br># delete all mp3 files (2):<br>PS&gt; dir | Where-Object { $_ -match '^(.+)\\.mp3$' } | Remove-Item<br># get all directories that have 'ali' string in their names:<br>PS&gt; dir | Where-Object { $_.Name -like '*ali*' }<br>--------------------------------------------------------------------<br># get variable type:<br>PS&gt; $x | Get-Member<br>#&nbsp;type casting:<br>PS&gt; [string]$a = 123<br>--------------------------------------------------------------------<br># arrays:<br>PS&gt; $a = 1,2,3,4<br>PS&gt; $a[0]<br>1<br>PS&gt; $a[1,2]<br>2<br>3<br>PS&gt; $a[0..2]<br>1<br>2<br>3<br>--------------------------------------------------------------------<br># About Comparison Operators:<br># -eq : equals<br># -ne : not equals<br># -gt : greater than<br># -lt : less than<br># -ge : greater than or equal<br># -le : less than or equal<br># About logical operators:<br># -or<br># -and<br><div># About Arithmetic Operators</div><div># % : Modulus</div><div># About Assignment Operators</div><div># += : C += A =&gt; C = C + A</div><div># -= : ...</div><div><br></div>"
}, {
    "sort_num": 36,
    "color": "sienna",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "کار با فایل ها در powershell"
}, {
    "sort_num": 37,
    "color": "sienna",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# make a file<br>PS&gt; New-Item song.mp3<br># delete a file<br>PS&gt; Remove-Item song.mp3<br># make a directory<br>PS&gt; mkdir folder<br># delete a directory<br>PS&gt; rmdir folder<br># delete a directory with everything in it<br>PS&gt; rmdir folder -Recurse<br># get a list of all files and folders<br>PS&gt; dir<br># copy<br>PS&gt; copy file1 .\\folder\\file1<br># move<br>PS&gt; move file1 .\\folder\\file1<br># get content:<br>PS&gt; Get-Content .\\file.txt<br># read<br>PS&gt; cat sample.txt<br># read line by line<br>PS&gt; more sample.txt<br><br>#example:<br>PS&gt; dir | Where-Object { ($_.Name -match '^file1$') -or ($_.Name -match '^file2$') }<br>"
}, {
    "sort_num": 38,
    "color": "darkgrey",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "کار با process ها و service ها"
}, {
    "sort_num": 39,
    "color": "darkgrey",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# get all services:<br>PS&gt; Get-Service<br># get all processes:<br>PS&gt; Get-Process<br><br># restart a service:<br>PS&gt;&nbsp;Get-Service -Name XblGameSave | Restart-Service<br># restart a process:<br>PS&gt;&nbsp;Get-Process -Name notepad | Stop-Process ; notepad&nbsp;<br># kill a process<br>PS&gt; Stop-Process -Id 4134 -Force<br><br># check a service running or not:<br>PS&gt;&nbsp;$a = Get-Service -Name XblGameSave; $a.Status<br># check a process running or not (true: running, false: stopped):<br>PS&gt;&nbsp;$a = Get-Process -Name notepad; $a -ne $null<br>"
}, {
    "sort_num": 40,
    "color": "darkmagenta",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "مثال ها:"
}, {
    "sort_num": 41,
    "color": "darkmagenta",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "<div>$files = dir<br></div><div><div>$counter = 0;</div><div>foreach ($item in $files)</div><div>{</div><div>&nbsp; &nbsp; $counter++</div><div>}</div><div>Write-Host $counter</div></div><div>--------------------------------------------------</div><div><div>for ($i=1;$i -le 5;$i++)</div><div>{</div><div>&nbsp; &nbsp; $userName = 'user' + $i.ToString();</div><div>&nbsp; &nbsp; New-LocalUser -Name $userName -NoPassword</div><div>}</div></div><div>--------------------------------------------------</div><div><div>$con = 0;</div><div>while ($con -le 10) {</div><div>&nbsp; &nbsp; Write-Host $con;</div><div>&nbsp; &nbsp; $con++;</div><div>}</div></div><div><div>0</div><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div></div><div>--------------------------------------------------</div><div><div>$con = 0;</div><div>do {</div><div>&nbsp; &nbsp; $con++;</div><div>&nbsp; &nbsp; Write-Host $con;</div><div>} while ($con -le 10)</div></div><div><div>0</div><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div></div><div>11</div><div>--------------------------------------------------</div><div>switch (1,3) {&nbsp;</div><div>&nbsp; &nbsp; 1 {\"One\"}&nbsp;</div><div>&nbsp; &nbsp; 2 {\"Two\"}&nbsp;</div><div>&nbsp; &nbsp; 3 {\"Three\"; break}&nbsp;</div><div>&nbsp; &nbsp; 4 {\"Four\"}&nbsp;</div><div>&nbsp; &nbsp; 3 {\"Three Again\"}&nbsp;</div><div>}<br></div><div>One</div><div>Three</div><div>--------------------------------------------------</div><div><div>$color = Read-Host 'ENTER COLOR'</div><div>$price = Read-Host 'ENTER PRICE'</div><div>$comName = $env:COMPUTERNAME</div><div>if (($color -eq 'blue') -and ($price -le 100))</div><div>{</div><div>&nbsp; &nbsp; clear;</div><div>&nbsp; &nbsp; Write-Host 'from' $comName ': buy'</div><div>}</div><div>else</div><div>{</div><div>&nbsp; &nbsp; clear;</div><div>&nbsp; &nbsp; Write-Host 'from' $comName ': DO NOT BUY'</div><div>}</div></div>"
}, {
    "sort_num": 42,
    "color": "darkblue",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "موارد دیگر:"
}, {
    "sort_num": 43,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# create a folder &amp; file:<br>New-Item -Path 'D:\\temp\\Test Folder' -ItemType Directory<br>New-Item -Path 'D:\\temp\\Test Folder\\Test File.txt' -ItemType File<br># -----------------------------------------------------<br># copy folder &amp; file:<br>Copy-Item 'D:\\temp\\Test Folder' 'D:\\temp\\Test Folder1'<br># recursively:<br>Copy-Item 'D:\\temp\\Test Folder' -Destination 'D:\\temp\\Test Folder1'<br>Copy-Item 'D:\\temp\\Test Folder\\Test File.txt' 'D:\\temp\\Test Folder1\\Test File1.txt'<br>Copy-Item -Filter *.txt -Path 'D:\\temp\\Test Folder' -Recurse -Destination 'D:\\temp\\Test Folder1'<br># -----------------------------------------------------<br># delete folder &amp; file:<br>Remove-Item 'D:\\temp\\Test Folder1'<br>Remove-Item 'D:\\temp\\Test Folder' -Recurse<br>Remove-Item 'D:\\temp\\Test Folder\\test.txt'<br>Remove-Item 'D:\\temp\\Test Folder' -Recurse<br># -----------------------------------------------------<br># move folder &amp; file:<br>Move-Item D:\\temp\\Test D:\\temp\\Test1<br>Move-Item D:\\temp\\Test\\Test.txt D:\\temp\\Test1<br># -----------------------------------------------------<br># rename folder &amp; file:<br>Rename-Item D:\\temp\\Test D:\\temp\\Test1<br>Rename-Item D:\\temp\\Test\\test.txt test1.txt<br># -----------------------------------------------------<br>#&nbsp;Retrieving Item<br>(Get-Content D:\\temp\\test\\test.txt).length<br># -----------------------------------------------------<br># check folder and file existence:<br>Test-Path D:\\temp\\test<br>Test-Path D:\\temp\\test\\test.txt<br>"
}, {
    "sort_num": 44,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# get date and time:<br>Get-Date<br>Get-Date -DisplayHint Time<br>"
}, {
    "sort_num": 45,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# create , set and get content from a txt file:<br>New-Item D:\\temp\\test\\test.txt<br>Set-Content D:\\temp\\test\\test.txt 'Welcome to TutorialsPoint'<br>get-Content D:\\temp\\test\\test.txt<br># -----------------------------------------------------<br>#&nbsp;Erase content of File<br>Clear-Content D:\\temp\\test\\test.txt<br># -----------------------------------------------------<br>#&nbsp;Append content to File<br>Add-Content D:\\temp\\test\\test.txt 'World!'<br>"
}, {
    "sort_num": 46,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "#&nbsp;Get-Unique<br>$list = \"one\",\"two\",\"two\",\"three\",\"four\",\"five\"<br>$list | sort | get-unique<br>#output:<br>five<br>four<br>one<br>three<br>two<br>"
}, {
    "sort_num": 47,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "#&nbsp;Measure-Object<br>get-content D:\\temp\\test\\test.txt | measure-object -character -line -word<br>Get-ChildItem | Measure-Object<br>"
}, {
    "sort_num": 48,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "#&nbsp;Compare-Object<br>#&nbsp;In this example, first we've a file test.txt in D:\\temp\\test with content \"Welcome to TutorialsPoint.Com\" and <br># test1.txt with content \"Hello World!\" and \"Welcome to TutorialsPoint.Com\" in two lines.<br>Compare-Object -ReferenceObject $(Get-Content D:\\temp\\test\\test.txt) -DifferenceObject $(Get-Content D:\\temp\\test\\test1.txt) -IncludeEqual<br># output:<br>InputObject&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SideIndicator <br>-----------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ------------- <br>Welcome to TutorialsPoint.Com&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; == <br>Hello World!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;=&gt;<br>"
}, {
    "sort_num": 49,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# Format-List<br>dir | Format-List<br>"
}, {
    "sort_num": 50,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# Format-Wide<br>Format-Wide -InputObject $A -Property Length<br># returns $A objects sizes (length)<br>"
}, {
    "sort_num": 51,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# sleep for 15 second<br>Start-Sleep -s 15<br># sleep for 500 milliseconds<br>Start-Sleep -m 500<br>"
}, {
    "sort_num": 52,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "dir | Select-Object -Property Mode<br>\"a\",\"b\",\"c\",\"a\",\"a\",\"a\" | Select-Object -Unique<br>"
}, {
    "sort_num": 53,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "Get-Process | Sort-Object -Property WS"
}, {
    "sort_num": 54,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# perform a default action on specified item (in this example we open notepad ...)<br>Invoke-Item test.txt<br>"
}, {
    "sort_num": 55,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "&gt; $Command = 'Get-Process' <br>&gt; $Command <br>Get-Process <br>&gt; Invoke-Expression $Command<br># Get-Process cmdlet output<br>"
}, {
    "sort_num": 56,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "#&nbsp;meaure the time taken by script or command<br>Measure-Command { dir }<br>"
}, {
    "sort_num": 57,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "#&nbsp;run the last command from the current session<br>Invoke-History<br>"
}, {
    "sort_num": 58,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "Get-history -count 5 | Add-history"
}, {
    "sort_num": 59,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "get-culture"
}, {
    "sort_num": 60,
    "color": "darkblue",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "در powershell متغیر ها همون object ها هستند (بهشون object هم می گیم) ، یکسری متغیر ها هم هستند که در powershell هستند و اسمشون هست special variables :"
}, {
    "sort_num": 61,
    "color": "darkblue",
    "type": "text",
    "group": "table",
    "format": "txt",
    "content": "<div>$^, اولین token که در اخرین خط توسط seasion دریافت شده را برمی گرداند |</div>$$, اخرین token که در اخرین خط توسط session دریافت شده را برمی گرداند |<div>$?, می گه آخرین کاری که کردی موفقیت آمیز بوده یا نه|</div><div>$_/$PSItem, -|</div><div>$Error, آرایه ای از ارور ها رو برمی گردونه|</div><div>$ExecutionContext, یک&nbsp;EngineIntrinsics object را نشان می دهد که زمینه ی اجرای powershell host را نشان می دهد.|</div><div>$FALSE, -|</div><div>$TRUE, -|</div><div>$NULL, -|</div><div>$HOME,&nbsp;Represents the full path of the user's home directory.|</div><div>$HOST,&nbsp;Represents an object that represents the current host application for PowerShell|</div><div>$MATCHES, -|</div><div>$MYINVOCATION, مثلا تو یه تابع می گه که کی منو صدا زده؟ بعد اسم همون تابع رو می ده مثلا|</div><div>$PID,&nbsp;Represents the process identifier (PID) of the process that is hosting the current PowerShell session|</div><div>$PROFILE,&nbsp;Represents the full path of the PowerShell profile for the current user and the current host application|</div><div>$PSCOMMANDPATH,&nbsp;Represents the full path and file name of the script that is being run|</div><div>$PSCULTURE, Represents the name of the culture currently in use in the operating system.|<br></div><div>$PSHOME, Represents the full path of the installation directory for PowerShell|<br></div><div>$PSSCRIPTROOT, Represents the directory from which a script is being run.|<br></div><div>$SHELLID, Represents the identifier of the current shell.|<br></div><div>$THIS, In a script block that defines a script property or script method the $This variable refers to the object that is being extended.<br></div>"
}, {
    "sort_num": 62,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "$A = 1,2,3,4<div>$A = 1..4</div><div>$A.getType()</div><div>$A.Length</div><div>$subA = $A[1..3]</div><div>$B = @(1..4)</div>"
}, {
    "sort_num": 63,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# Hashtables&nbsp;<div># -----------------------------------------------------------------------------</div><div>$hash = @{ ID = 1; Shape = 'Square'; Color = 'Blue'}&nbsp;</div><div># -----------------------------------------------------------------------------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br></div><div>$hash2 = [ordered]@{ id = 1; name= 'ashkan'; familiy= 'nasirzadeh'}&nbsp;<br></div><div><div>Name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Value</div><div>----&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-----</div><div>id&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1</div><div>name&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ashkan</div><div>familiy&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; nasirzadeh</div></div><div>&gt; $hash.keys&nbsp;</div><div>ID&nbsp;</div><div>Color&nbsp;</div><div>Shape&nbsp;</div><div>&gt; $hash.values&nbsp;</div><div>1&nbsp;</div><div>Blue&nbsp;</div><div>Square<br></div><div>&gt; $hash.Add(\"Created\",\"Now\")&nbsp;</div><div>&gt;$hash.Remove(\"Updated\")<br></div>"
}, {
    "sort_num": 64,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# following -matchs are true:<div>'copy' -match 'c..y'</div><div>'big' -match 'b[iou]g'</div><div>'baggy' -match 'g+'</div>"
}, {
    "sort_num": 65,
    "color": "darkblue",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "به وسیله ی ` می توانیم یک دستور طولانی را در چند خط بنویسیم"
}, {
    "sort_num": 66,
    "color": "darkblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "New-Alias -Name d -Value dir<div><div>Get-Alias | Where-Object { $_ -like '*d*'}</div></div>"
}, {
    "sort_num": 67,
    "color": "royalblue",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "administrator کاربر را فعال کردن"
}, {
    "sort_num": 68,
    "color": "royalblue",
    "type": "bdi-text",
    "group": "para",
    "format": "txt",
    "content": "powershell حتما با اختیارات administrator باز شده باشد و سپس کد زیر را بزنید:"
}, {
    "sort_num": 69,
    "color": "royalblue",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "net user administrator /active:yes"
}, {
    "sort_num": 70,
    "color": "darkseagreen",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "web و powershell"
}, {
    "sort_num": 71,
    "color": "darkseagreen",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "netstat -ano<br>Get-NetTCPConnection<br>"
}, {
    "sort_num": 72,
    "color": "black",
    "type": "bdi-text",
    "group": "head1",
    "format": "txt",
    "content": "چندین چیز دیگر!"
}, {
    "sort_num": 73,
    "color": "black",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# get the computer name:<br>hostname<br>"
}, {
    "sort_num": 74,
    "color": "black",
    "type": "text",
    "group": "code",
    "format": "txt",
    "content": "# close all tcp connections which have 127.0.0.1 localAddress<br>netstat -ano |\r<br>ForEach-Object {\r<br>&nbsp; &nbsp; if ($_ -match '\\s+TCP\\s+127.0.0.1:(.*)\\s+(.*)\\s+(.*)\\s+(.*)') {\r<br>&nbsp; &nbsp; &nbsp; &nbsp; Stop-Process -Id $Matches[4] -Force\r<br>&nbsp; &nbsp; }\r<br>}<br>"
}]